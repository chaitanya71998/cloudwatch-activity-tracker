"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TTIPlugin = exports.TTI_EVENT_PLUGIN_ID = void 0;
var TimeToInteractive_1 = require("../../time-to-interactive/TimeToInteractive");
var constant_1 = require("../utils/constant");
var InternalPlugin_1 = require("../InternalPlugin");
exports.TTI_EVENT_PLUGIN_ID = 'time-to-interactive';
var TTIPlugin = /** @class */ (function (_super) {
    __extends(TTIPlugin, _super);
    function TTIPlugin(fpsMeasurementEnabled) {
        if (fpsMeasurementEnabled === void 0) { fpsMeasurementEnabled = false; }
        var _this = _super.call(this, exports.TTI_EVENT_PLUGIN_ID) || this;
        _this.recordTTIEvent = function () {
            (0, TimeToInteractive_1.onTTI)(_this.handleTTI, { fpsEnabled: _this.fpsEnabled });
        };
        _this.checkPrerenderingActivity = function () {
            if (typeof document !== 'undefined' &&
                typeof document.prerendering === 'boolean' &&
                document.prerendering) {
                _this.normalPageLoad = false;
                document.addEventListener('prerenderingchange', function () {
                    _this.prerenderedPageLoad = true;
                    _this.recordTTIEvent();
                });
            }
            if (typeof performance !== 'undefined' &&
                typeof performance.getEntriesByType === 'function') {
                try {
                    var entries = performance.getEntriesByType('navigation');
                    if (entries && entries.length > 0) {
                        var navigation = entries[0];
                        if (navigation &&
                            navigation.activationStart &&
                            navigation.activationStart > 0) {
                            _this.prerenderedPageLoad = true;
                            _this.normalPageLoad = false;
                        }
                    }
                }
                catch (e) {
                    console.debug('Error accessing Performance API:', e);
                }
            }
        };
        _this.handleTTI = function (metric) {
            var ttiEvent = {
                version: '1.0.0',
                value: Math.round(metric.value)
            };
            _this.context.record(constant_1.TIME_TO_INTERACTIVE_EVENT_TYPE, ttiEvent);
        };
        _this.fpsEnabled = fpsMeasurementEnabled;
        _this.prerenderedPageLoad = false;
        _this.normalPageLoad = true;
        _this.checkPrerenderingActivity();
        return _this;
    }
    TTIPlugin.prototype.enable = function () {
        /* Nothing to do. */
    };
    TTIPlugin.prototype.disable = function () {
        /* Nothing to do. */
    };
    TTIPlugin.prototype.configure = function () {
        /* Nothing to do. */
    };
    TTIPlugin.prototype.onload = function () {
        if (this.normalPageLoad || this.prerenderedPageLoad) {
            this.recordTTIEvent();
        }
    };
    return TTIPlugin;
}(InternalPlugin_1.InternalPlugin));
exports.TTIPlugin = TTIPlugin;
