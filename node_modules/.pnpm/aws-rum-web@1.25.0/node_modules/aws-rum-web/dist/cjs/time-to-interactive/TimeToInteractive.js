"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeToInteractive = exports.onTTI = void 0;
/* eslint-disable jsdoc/check-indentation */
var common_utils_1 = require("../utils/common-utils");
var VisuallyReadySearch_1 = require("./VisuallyReadySearch");
var QuietWindowSearch_1 = require("./QuietWindowSearch");
function onTTI(onReport, opts) {
    if ((0, common_utils_1.isLongTaskSupported)()) {
        new TimeToInteractive(onReport, opts);
    }
}
exports.onTTI = onTTI;
/**
 * This class measures the "time to interactive" web vital. Time to interactive
 * is a measure of how long it takes for a page to become interactive for the
 * user.
 * <p>
 * This class implements the TTI algorithm used by Boomerang, with modifications.
 * (Ref: https://akamai.github.io/boomerang/oss/BOOMR.plugins.Continuity.html)
 * <p>
 * Steps to TTI calculation:
 * 1) Find visually ready timestamp (highest of domcontentLoadedEnd, FCP or LCP).
 * 2) Starting from the visually ready timestamp, find a 500ms quiet window. A
 *    quiet window has the following characteristics:
 *      a) No Long Tasks
 *      b) FPS is above 20 (if enabled)
 * 3) TTI is recorded as visually ready timestamp + time from visually ready to the start of the quiet window.
 * <p>
 * This class measures TTI only when running in a browser that supports Long Tasks.
 */
var TimeToInteractive = /** @class */ (function () {
    function TimeToInteractive(onReport, opts) {
        this.onReport = onReport;
        // Begin attempt for TTI resolution by looking for visually ready and then a quiet window
        this.quietWindowSearch = new QuietWindowSearch_1.QuietWindowSearch(opts.fpsEnabled, this.onReport);
        this.visuallyReadySearch = new VisuallyReadySearch_1.VisuallyReadySearch(this.quietWindowSearch);
    }
    return TimeToInteractive;
}());
exports.TimeToInteractive = TimeToInteractive;
